// Generated by gencpp from file diff_msgs/WheelSpeedStatus.msg
// DO NOT EDIT!


#ifndef DIFF_MSGS_MESSAGE_WHEELSPEEDSTATUS_H
#define DIFF_MSGS_MESSAGE_WHEELSPEEDSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diff_msgs
{
template <class ContainerAllocator>
struct WheelSpeedStatus_
{
  typedef WheelSpeedStatus_<ContainerAllocator> Type;

  WheelSpeedStatus_()
    : leftWheelSpeed(0.0)
    , rightWheelSpeed(0.0)  {
    }
  WheelSpeedStatus_(const ContainerAllocator& _alloc)
    : leftWheelSpeed(0.0)
    , rightWheelSpeed(0.0)  {
  (void)_alloc;
    }



   typedef float _leftWheelSpeed_type;
  _leftWheelSpeed_type leftWheelSpeed;

   typedef float _rightWheelSpeed_type;
  _rightWheelSpeed_type rightWheelSpeed;





  typedef boost::shared_ptr< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSpeedStatus_

typedef ::diff_msgs::WheelSpeedStatus_<std::allocator<void> > WheelSpeedStatus;

typedef boost::shared_ptr< ::diff_msgs::WheelSpeedStatus > WheelSpeedStatusPtr;
typedef boost::shared_ptr< ::diff_msgs::WheelSpeedStatus const> WheelSpeedStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace diff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'diff_msgs': ['/home/lie/catkin_ws/src/diff_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42041362f0a37ae1950d82164710780f";
  }

  static const char* value(const ::diff_msgs::WheelSpeedStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42041362f0a37ae1ULL;
  static const uint64_t static_value2 = 0x950d82164710780fULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diff_msgs/WheelSpeedStatus";
  }

  static const char* value(const ::diff_msgs::WheelSpeedStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 轮速状态信息\n\
# 报文标识符 0x401\n\
\n\
float32 leftWheelSpeed    #左轮轮速 单位mm/s\n\
float32 rightWheelSpeed   #右轮轮速 单位mm/s\n\
";
  }

  static const char* value(const ::diff_msgs::WheelSpeedStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftWheelSpeed);
      stream.next(m.rightWheelSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSpeedStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_msgs::WheelSpeedStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diff_msgs::WheelSpeedStatus_<ContainerAllocator>& v)
  {
    s << indent << "leftWheelSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.leftWheelSpeed);
    s << indent << "rightWheelSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.rightWheelSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFF_MSGS_MESSAGE_WHEELSPEEDSTATUS_H
