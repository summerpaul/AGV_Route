# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from messagefiles/AgvStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AgvStatus(genpy.Message):
  _md5sum = "12297eaf37f3a36798a49df79c183942"
  _type = "messagefiles/AgvStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
#左轮速度
int32 leftspeed 
#右轮速度      
int32 rightspeed
#重量
uint32 weight
#电池电量
uint16 batteryPercent
#顶升状态
uint16 liftStatus
#AGV状态
bool electroMagnet        #电磁状态
bool charge                        #充电状态
bool brake                           #驱动供电 
bool backIR                         #倒车红外        
bool bumpedg                   #防撞触边
bool frontEMS                    #前急停开关     
bool rearEMS                      #后急停开关         
bool agvmode                    #小车模式               
#AGV报警信息
bool FrontEMS                    #前急停按下                
bool FrontEMSreq             #前急停请求复位                                    
bool RearEMS                      #后急停按下                                      
bool RearEMSreq               #后急停请求复位                                         
bool XMonitorerr                #Ｘ方向安全停止监控错误                                            
bool WMonitorerr               #Ｗ方向安全停止监控错误                                                      
bool XSpeedover                #X方向速度超出                                      
bool WSpeedover               #Ｗ方向速度超出                                           
bool Initerr                            #初始化错误                                   
bool Batterypro                   #电池保护动作                                         
bool PNCANerr                     #PN/CAN错误                                            
bool LeftEncodererr           #左轮驱动器一般错误                                                                
bool RightEncodererr        #右轮驱动器一般错误                                                                                      
bool JackEncodererr         #顶升驱动器一般错误                                                             
bool JackUplimit                 #顶升上限位传感器触发                                                         
bool JackDownlimit           #顶升下限位传感器触发                                                         
bool JackNoresponse        #顶升无响应                                                                     
bool JackOvertime              #顶升动作时间超出                                                       
bool JackWinerr                    # 顶升位置窗口错误                                                 
#预留
uint32 reserve



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','leftspeed','rightspeed','weight','batteryPercent','liftStatus','electroMagnet','charge','brake','backIR','bumpedg','frontEMS','rearEMS','agvmode','FrontEMS','FrontEMSreq','RearEMS','RearEMSreq','XMonitorerr','WMonitorerr','XSpeedover','WSpeedover','Initerr','Batterypro','PNCANerr','LeftEncodererr','RightEncodererr','JackEncodererr','JackUplimit','JackDownlimit','JackNoresponse','JackOvertime','JackWinerr','reserve']
  _slot_types = ['std_msgs/Header','int32','int32','uint32','uint16','uint16','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,leftspeed,rightspeed,weight,batteryPercent,liftStatus,electroMagnet,charge,brake,backIR,bumpedg,frontEMS,rearEMS,agvmode,FrontEMS,FrontEMSreq,RearEMS,RearEMSreq,XMonitorerr,WMonitorerr,XSpeedover,WSpeedover,Initerr,Batterypro,PNCANerr,LeftEncodererr,RightEncodererr,JackEncodererr,JackUplimit,JackDownlimit,JackNoresponse,JackOvertime,JackWinerr,reserve

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AgvStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.leftspeed is None:
        self.leftspeed = 0
      if self.rightspeed is None:
        self.rightspeed = 0
      if self.weight is None:
        self.weight = 0
      if self.batteryPercent is None:
        self.batteryPercent = 0
      if self.liftStatus is None:
        self.liftStatus = 0
      if self.electroMagnet is None:
        self.electroMagnet = False
      if self.charge is None:
        self.charge = False
      if self.brake is None:
        self.brake = False
      if self.backIR is None:
        self.backIR = False
      if self.bumpedg is None:
        self.bumpedg = False
      if self.frontEMS is None:
        self.frontEMS = False
      if self.rearEMS is None:
        self.rearEMS = False
      if self.agvmode is None:
        self.agvmode = False
      if self.FrontEMS is None:
        self.FrontEMS = False
      if self.FrontEMSreq is None:
        self.FrontEMSreq = False
      if self.RearEMS is None:
        self.RearEMS = False
      if self.RearEMSreq is None:
        self.RearEMSreq = False
      if self.XMonitorerr is None:
        self.XMonitorerr = False
      if self.WMonitorerr is None:
        self.WMonitorerr = False
      if self.XSpeedover is None:
        self.XSpeedover = False
      if self.WSpeedover is None:
        self.WSpeedover = False
      if self.Initerr is None:
        self.Initerr = False
      if self.Batterypro is None:
        self.Batterypro = False
      if self.PNCANerr is None:
        self.PNCANerr = False
      if self.LeftEncodererr is None:
        self.LeftEncodererr = False
      if self.RightEncodererr is None:
        self.RightEncodererr = False
      if self.JackEncodererr is None:
        self.JackEncodererr = False
      if self.JackUplimit is None:
        self.JackUplimit = False
      if self.JackDownlimit is None:
        self.JackDownlimit = False
      if self.JackNoresponse is None:
        self.JackNoresponse = False
      if self.JackOvertime is None:
        self.JackOvertime = False
      if self.JackWinerr is None:
        self.JackWinerr = False
      if self.reserve is None:
        self.reserve = 0
    else:
      self.header = std_msgs.msg.Header()
      self.leftspeed = 0
      self.rightspeed = 0
      self.weight = 0
      self.batteryPercent = 0
      self.liftStatus = 0
      self.electroMagnet = False
      self.charge = False
      self.brake = False
      self.backIR = False
      self.bumpedg = False
      self.frontEMS = False
      self.rearEMS = False
      self.agvmode = False
      self.FrontEMS = False
      self.FrontEMSreq = False
      self.RearEMS = False
      self.RearEMSreq = False
      self.XMonitorerr = False
      self.WMonitorerr = False
      self.XSpeedover = False
      self.WSpeedover = False
      self.Initerr = False
      self.Batterypro = False
      self.PNCANerr = False
      self.LeftEncodererr = False
      self.RightEncodererr = False
      self.JackEncodererr = False
      self.JackUplimit = False
      self.JackDownlimit = False
      self.JackNoresponse = False
      self.JackOvertime = False
      self.JackWinerr = False
      self.reserve = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iI2H27BI().pack(_x.leftspeed, _x.rightspeed, _x.weight, _x.batteryPercent, _x.liftStatus, _x.electroMagnet, _x.charge, _x.brake, _x.backIR, _x.bumpedg, _x.frontEMS, _x.rearEMS, _x.agvmode, _x.FrontEMS, _x.FrontEMSreq, _x.RearEMS, _x.RearEMSreq, _x.XMonitorerr, _x.WMonitorerr, _x.XSpeedover, _x.WSpeedover, _x.Initerr, _x.Batterypro, _x.PNCANerr, _x.LeftEncodererr, _x.RightEncodererr, _x.JackEncodererr, _x.JackUplimit, _x.JackDownlimit, _x.JackNoresponse, _x.JackOvertime, _x.JackWinerr, _x.reserve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.leftspeed, _x.rightspeed, _x.weight, _x.batteryPercent, _x.liftStatus, _x.electroMagnet, _x.charge, _x.brake, _x.backIR, _x.bumpedg, _x.frontEMS, _x.rearEMS, _x.agvmode, _x.FrontEMS, _x.FrontEMSreq, _x.RearEMS, _x.RearEMSreq, _x.XMonitorerr, _x.WMonitorerr, _x.XSpeedover, _x.WSpeedover, _x.Initerr, _x.Batterypro, _x.PNCANerr, _x.LeftEncodererr, _x.RightEncodererr, _x.JackEncodererr, _x.JackUplimit, _x.JackDownlimit, _x.JackNoresponse, _x.JackOvertime, _x.JackWinerr, _x.reserve,) = _get_struct_2iI2H27BI().unpack(str[start:end])
      self.electroMagnet = bool(self.electroMagnet)
      self.charge = bool(self.charge)
      self.brake = bool(self.brake)
      self.backIR = bool(self.backIR)
      self.bumpedg = bool(self.bumpedg)
      self.frontEMS = bool(self.frontEMS)
      self.rearEMS = bool(self.rearEMS)
      self.agvmode = bool(self.agvmode)
      self.FrontEMS = bool(self.FrontEMS)
      self.FrontEMSreq = bool(self.FrontEMSreq)
      self.RearEMS = bool(self.RearEMS)
      self.RearEMSreq = bool(self.RearEMSreq)
      self.XMonitorerr = bool(self.XMonitorerr)
      self.WMonitorerr = bool(self.WMonitorerr)
      self.XSpeedover = bool(self.XSpeedover)
      self.WSpeedover = bool(self.WSpeedover)
      self.Initerr = bool(self.Initerr)
      self.Batterypro = bool(self.Batterypro)
      self.PNCANerr = bool(self.PNCANerr)
      self.LeftEncodererr = bool(self.LeftEncodererr)
      self.RightEncodererr = bool(self.RightEncodererr)
      self.JackEncodererr = bool(self.JackEncodererr)
      self.JackUplimit = bool(self.JackUplimit)
      self.JackDownlimit = bool(self.JackDownlimit)
      self.JackNoresponse = bool(self.JackNoresponse)
      self.JackOvertime = bool(self.JackOvertime)
      self.JackWinerr = bool(self.JackWinerr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iI2H27BI().pack(_x.leftspeed, _x.rightspeed, _x.weight, _x.batteryPercent, _x.liftStatus, _x.electroMagnet, _x.charge, _x.brake, _x.backIR, _x.bumpedg, _x.frontEMS, _x.rearEMS, _x.agvmode, _x.FrontEMS, _x.FrontEMSreq, _x.RearEMS, _x.RearEMSreq, _x.XMonitorerr, _x.WMonitorerr, _x.XSpeedover, _x.WSpeedover, _x.Initerr, _x.Batterypro, _x.PNCANerr, _x.LeftEncodererr, _x.RightEncodererr, _x.JackEncodererr, _x.JackUplimit, _x.JackDownlimit, _x.JackNoresponse, _x.JackOvertime, _x.JackWinerr, _x.reserve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.leftspeed, _x.rightspeed, _x.weight, _x.batteryPercent, _x.liftStatus, _x.electroMagnet, _x.charge, _x.brake, _x.backIR, _x.bumpedg, _x.frontEMS, _x.rearEMS, _x.agvmode, _x.FrontEMS, _x.FrontEMSreq, _x.RearEMS, _x.RearEMSreq, _x.XMonitorerr, _x.WMonitorerr, _x.XSpeedover, _x.WSpeedover, _x.Initerr, _x.Batterypro, _x.PNCANerr, _x.LeftEncodererr, _x.RightEncodererr, _x.JackEncodererr, _x.JackUplimit, _x.JackDownlimit, _x.JackNoresponse, _x.JackOvertime, _x.JackWinerr, _x.reserve,) = _get_struct_2iI2H27BI().unpack(str[start:end])
      self.electroMagnet = bool(self.electroMagnet)
      self.charge = bool(self.charge)
      self.brake = bool(self.brake)
      self.backIR = bool(self.backIR)
      self.bumpedg = bool(self.bumpedg)
      self.frontEMS = bool(self.frontEMS)
      self.rearEMS = bool(self.rearEMS)
      self.agvmode = bool(self.agvmode)
      self.FrontEMS = bool(self.FrontEMS)
      self.FrontEMSreq = bool(self.FrontEMSreq)
      self.RearEMS = bool(self.RearEMS)
      self.RearEMSreq = bool(self.RearEMSreq)
      self.XMonitorerr = bool(self.XMonitorerr)
      self.WMonitorerr = bool(self.WMonitorerr)
      self.XSpeedover = bool(self.XSpeedover)
      self.WSpeedover = bool(self.WSpeedover)
      self.Initerr = bool(self.Initerr)
      self.Batterypro = bool(self.Batterypro)
      self.PNCANerr = bool(self.PNCANerr)
      self.LeftEncodererr = bool(self.LeftEncodererr)
      self.RightEncodererr = bool(self.RightEncodererr)
      self.JackEncodererr = bool(self.JackEncodererr)
      self.JackUplimit = bool(self.JackUplimit)
      self.JackDownlimit = bool(self.JackDownlimit)
      self.JackNoresponse = bool(self.JackNoresponse)
      self.JackOvertime = bool(self.JackOvertime)
      self.JackWinerr = bool(self.JackWinerr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iI2H27BI = None
def _get_struct_2iI2H27BI():
    global _struct_2iI2H27BI
    if _struct_2iI2H27BI is None:
        _struct_2iI2H27BI = struct.Struct("<2iI2H27BI")
    return _struct_2iI2H27BI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
