// Generated by gencpp from file messagefiles/ErrorMessage.msg
// DO NOT EDIT!


#ifndef MESSAGEFILES_MESSAGE_ERRORMESSAGE_H
#define MESSAGEFILES_MESSAGE_ERRORMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messagefiles
{
template <class ContainerAllocator>
struct ErrorMessage_
{
  typedef ErrorMessage_<ContainerAllocator> Type;

  ErrorMessage_()
    : error_code(0)
    , error_level(0)
    , error_description()  {
    }
  ErrorMessage_(const ContainerAllocator& _alloc)
    : error_code(0)
    , error_level(0)
    , error_description(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _error_level_type;
  _error_level_type error_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_description_type;
  _error_description_type error_description;





  typedef boost::shared_ptr< ::messagefiles::ErrorMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messagefiles::ErrorMessage_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorMessage_

typedef ::messagefiles::ErrorMessage_<std::allocator<void> > ErrorMessage;

typedef boost::shared_ptr< ::messagefiles::ErrorMessage > ErrorMessagePtr;
typedef boost::shared_ptr< ::messagefiles::ErrorMessage const> ErrorMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messagefiles::ErrorMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messagefiles::ErrorMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messagefiles::ErrorMessage_<ContainerAllocator1> & lhs, const ::messagefiles::ErrorMessage_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.error_level == rhs.error_level &&
    lhs.error_description == rhs.error_description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messagefiles::ErrorMessage_<ContainerAllocator1> & lhs, const ::messagefiles::ErrorMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messagefiles

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::messagefiles::ErrorMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messagefiles::ErrorMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messagefiles::ErrorMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messagefiles::ErrorMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messagefiles::ErrorMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messagefiles::ErrorMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messagefiles::ErrorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7c7da4952122cfac9947516635a3350";
  }

  static const char* value(const ::messagefiles::ErrorMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7c7da4952122cfaULL;
  static const uint64_t static_value2 = 0xc9947516635a3350ULL;
};

template<class ContainerAllocator>
struct DataType< ::messagefiles::ErrorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messagefiles/ErrorMessage";
  }

  static const char* value(const ::messagefiles::ErrorMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messagefiles::ErrorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 错误码\n"
"int32 error_code\n"
"# 错误等级 0：Normal 1：info 2：warn 3：error\n"
"uint8 error_level\n"
"# 错误描述\n"
"string error_description\n"
;
  }

  static const char* value(const ::messagefiles::ErrorMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messagefiles::ErrorMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.error_level);
      stream.next(m.error_description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messagefiles::ErrorMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messagefiles::ErrorMessage_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "error_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_level);
    s << indent << "error_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGEFILES_MESSAGE_ERRORMESSAGE_H
