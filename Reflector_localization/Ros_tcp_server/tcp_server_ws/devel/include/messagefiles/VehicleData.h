// Generated by gencpp from file messagefiles/VehicleData.msg
// DO NOT EDIT!


#ifndef MESSAGEFILES_MESSAGE_VEHICLEDATA_H
#define MESSAGEFILES_MESSAGE_VEHICLEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messagefiles
{
template <class ContainerAllocator>
struct VehicleData_
{
  typedef VehicleData_<ContainerAllocator> Type;

  VehicleData_()
    : curr_lane_ID(0)
    , curr_point_ID(0)
    , qr_code(0)  {
    }
  VehicleData_(const ContainerAllocator& _alloc)
    : curr_lane_ID(0)
    , curr_point_ID(0)
    , qr_code(0)  {
  (void)_alloc;
    }



   typedef int32_t _curr_lane_ID_type;
  _curr_lane_ID_type curr_lane_ID;

   typedef int32_t _curr_point_ID_type;
  _curr_point_ID_type curr_point_ID;

   typedef int32_t _qr_code_type;
  _qr_code_type qr_code;





  typedef boost::shared_ptr< ::messagefiles::VehicleData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messagefiles::VehicleData_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleData_

typedef ::messagefiles::VehicleData_<std::allocator<void> > VehicleData;

typedef boost::shared_ptr< ::messagefiles::VehicleData > VehicleDataPtr;
typedef boost::shared_ptr< ::messagefiles::VehicleData const> VehicleDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messagefiles::VehicleData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messagefiles::VehicleData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messagefiles::VehicleData_<ContainerAllocator1> & lhs, const ::messagefiles::VehicleData_<ContainerAllocator2> & rhs)
{
  return lhs.curr_lane_ID == rhs.curr_lane_ID &&
    lhs.curr_point_ID == rhs.curr_point_ID &&
    lhs.qr_code == rhs.qr_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messagefiles::VehicleData_<ContainerAllocator1> & lhs, const ::messagefiles::VehicleData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messagefiles

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::messagefiles::VehicleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messagefiles::VehicleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messagefiles::VehicleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messagefiles::VehicleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messagefiles::VehicleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messagefiles::VehicleData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messagefiles::VehicleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68355aefe2b373fc8c511606e3ddcc6c";
  }

  static const char* value(const ::messagefiles::VehicleData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68355aefe2b373fcULL;
  static const uint64_t static_value2 = 0x8c511606e3ddcc6cULL;
};

template<class ContainerAllocator>
struct DataType< ::messagefiles::VehicleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messagefiles/VehicleData";
  }

  static const char* value(const ::messagefiles::VehicleData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messagefiles::VehicleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 curr_lane_ID\n"
"int32 curr_point_ID\n"
"int32 qr_code\n"
;
  }

  static const char* value(const ::messagefiles::VehicleData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messagefiles::VehicleData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_lane_ID);
      stream.next(m.curr_point_ID);
      stream.next(m.qr_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messagefiles::VehicleData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messagefiles::VehicleData_<ContainerAllocator>& v)
  {
    s << indent << "curr_lane_ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curr_lane_ID);
    s << indent << "curr_point_ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.curr_point_ID);
    s << indent << "qr_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.qr_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGEFILES_MESSAGE_VEHICLEDATA_H
